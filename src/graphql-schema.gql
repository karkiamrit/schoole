# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Address {
  address_type: String!
  country: String!
  display_name: String!
  id: ID!
  latitude: String!
  longitude: String!
  municipality: String!
  postal_code: String!
  state: String!
  user: User!
}

type Certificate {
  certificate_title: String!
  id: ID!
  photo: String!
  student: Student!
}

input CreateAddressInput {
  latitude: String!
}

input CreateCertificateInput {
  certificate_title: String!
  photo: String
}

input CreateInstitutionInput {
  name: String!
  type: type!
}

input CreateKycInput {
  institution: Float!
  kyc_document: String!
  kyc_type: String!
  volunteer: Float!
}

input CreateOrganizerInput {
  full_name: String!
}

input CreateStudentInput {
  bio: String!
  date_of_birth: DateTime!
  first_name: String!
  gender: String!
  interests: [String!]
  last_name: String!
  level: Level!
  middle_name: String
}

input CreateUserInput {
  email: String!
  password: String!
  phone: String!
  profile_picture: String!
  username: String!
}

input CreateVolunteerInput {
  full_name: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""The gender of the students or users"""
enum Gender {
  female
  male
  not_specified
  other
}

type GetAddressType {
  count: Float
  data: [Address!]
}

type GetCertificateType {
  count: Float
  data: [Certificate!]
}

type GetInstitutionType {
  count: Float
  data: [Institution!]
}

type GetKycType {
  count: Float
  data: [kycs!]
}

input GetManyInput {
  """count or data or all, default = data"""
  dataType: String

  """
  {key: "ASC" or "DESC" or "asc" or "desc" or 1 or -1} or {key: {direction: "ASC" or "DESC" or "asc" or "desc", nulls: "first" or "last" or "FIRST" or "LAST"}}}
  """
  order: JSON
  pagination: IPagination
  where: JSON
}

input GetOneInput {
  where: JSON!
}

type GetOrganizerType {
  count: Float
  data: [Organizer!]
}

type GetStudentType {
  count: Float
  data: [Student!]
}

type GetUserType {
  count: Float
  data: [User!]
}

type GetVolunteerType {
  count: Float
  data: [volunteers!]
}

input IPagination {
  """Started from 0"""
  page: Int!

  """Size of page"""
  size: Int!
}

type Institution {
  created_at: DateTime!
  id: ID!
  name: String!
  type: type!
  updated_at: DateTime!
  user: User!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type JwtWithUser {
  jwt: String!
  user: User!
}

"""The level of education of students"""
enum Level {
  high_school
  higher_secondary
  pre_primary
  primary
  secondary
  under_graduate
}

type Mail {
  created_at: DateTime!
  html_content: String!
  id: ID!
  name: String!
  subject: String!
  text_content: String!
  updated_at: DateTime!
}

type Mutation {
  SignUp(input: SignUpInput!): User!
  createAddress(input: CreateAddressInput!): Address!
  createCertificate(input: CreateCertificateInput!, transactionId: String!): Certificate!
  createInstitution(input: CreateInstitutionInput!): Institution!
  createKyc(input: CreateKycInput!): kycs!
  createManyAddress(input: [CreateAddressInput!]!): [Address!]!
  createManyCertificate(input: [CreateCertificateInput!]!): [Certificate!]!
  createManyInstitution(input: [CreateInstitutionInput!]!): [Institution!]!
  createManyKyc(input: [CreateKycInput!]!): [kycs!]!
  createManyOrganizer(input: [CreateOrganizerInput!]!): [Organizer!]!
  createManyStudent(input: [CreateStudentInput!]!): [Student!]!
  createManyUsers(input: [CreateUserInput!]!): [User!]!
  createManyVolunteer(input: [CreateVolunteerInput!]!): [volunteers!]!
  createOrganizer(input: CreateOrganizerInput!): Organizer!
  createStudent(input: CreateStudentInput!): Student!
  createUser(input: CreateUserInput!): User!
  createVolunteer(input: CreateVolunteerInput!): volunteers!
  deleteAddress(id: Float!): Address!
  deleteCertificate(id: Float!): Certificate!
  deleteInstitution(id: Float!): Institution!
  deleteKyc(id: Float!): kycs!
  deleteOrganizer(id: Float!): Organizer!
  deleteStudent(id: Float!): Student!
  deleteUser(id: Float!): JSON!
  deleteVolunteer(id: Float!): volunteers!
  forgotPassword(email: String!): Boolean!
  logout(accessToken: String!): Boolean!
  requestOtpVerify(email: String!, otpType: String!): Boolean!
  resetPassword(newPassword: String!, token: String!): Boolean!
  signIn(input: SignInInput!): JwtWithUser!
  updateAddress(id: Float!, input: UpdateAddressInput!): Address!
  updateCertificate(id: Float!, input: UpdateCertificateInput!): Certificate!
  updateInstitution(id: Float!, input: UpdateInstitutionInput!): Institution!
  updateKyc(id: Float!, input: UpdateKycInput!): kycs!
  updateMe(input: UpdateUserInput!): User!
  updateOrganizer(id: Float!, input: UpdateOrganizerInput!): Organizer!
  updateStudent(id: Float!, input: UpdateStudentInput!): Student!
  updateUser(id: Float!, input: UpdateUserInput!): User!
  updateVolunteer(id: Float!, input: UpdateVolunteerInput!): volunteers!
  verifyEmail(email: String!, otpCode: String!): Boolean!
}

type Organizer {
  created_at: DateTime!
  full_name: String!
  id: ID!
  organizer_type: OrganizerType!
  updated_at: DateTime!
  user: User!
}

"""The basic organizer type of organizer user"""
enum OrganizerType {
  club
}

type Query {
  getManyAddresss(input: GetManyInput): GetAddressType!
  getManyCertificates(input: GetManyInput): GetCertificateType!
  getManyInstitutions(input: GetManyInput): GetInstitutionType!
  getManyKycs(input: GetManyInput): GetKycType!
  getManyOrganizers(input: GetManyInput): GetOrganizerType!
  getManyStudents(input: GetManyInput): GetStudentType!
  getManyUsers(input: GetManyInput): GetUserType!
  getManyVolunteers(input: GetManyInput): GetVolunteerType!
  getMe: User!
  getOneAddress(input: GetOneInput!): Address!
  getOneCertificate(input: GetOneInput!): Certificate!
  getOneInstitution(input: GetOneInput!): Institution!
  getOneKyc(input: GetOneInput!): kycs!
  getOneOrganizer(input: GetOneInput!): Organizer!
  getOneStudent(input: GetOneInput!): Student!
  getOneUser(input: GetOneInput!): User!
  getOneVolunteer(input: GetOneInput!): volunteers!
}

"""The basic roles of users"""
enum Role {
  admin
  user
}

type School {
  created_at: DateTime!
  id: ID!
  name: String!
  updated_at: DateTime!
}

input SignInInput {
  email: String!
  password: String!
}

input SignUpInput {
  email: String!
  password: String!
  phone: String
  username: String!
}

type Student {
  bio: String!
  created_at: DateTime!
  date_of_birth: String!
  first_name: String!
  gender: Gender!
  id: ID!
  interests: [String!]
  last_name: String!
  level: Level!
  middle_name: String
  updated_at: DateTime!
  user: User!
}

input UpdateAddressInput {
  latitude: String!
}

input UpdateCertificateInput {
  certificate_title: String
  photo: String
}

input UpdateInstitutionInput {
  name: String
  type: type
}

input UpdateKycInput {
  established_on: String!
}

input UpdateOrganizerInput {
  full_name: String!
}

input UpdateStudentInput {
  bio: String
  date_of_birth: DateTime
  first_name: String
  gender: String
  interests: [String!]
  last_name: String
  level: Level
  middle_name: String
}

input UpdateUserInput {
  email: String
  password: String
  phone: String
  profile_picture: String
  username: String
}

input UpdateVolunteerInput {
  full_name: String!
}

type User {
  created_at: DateTime!
  email: String!
  email_verified: Boolean!
  id: ID!
  last_login: DateTime
  password: String!
  phone: String!
  profile_picture: String!
  role: Role!
  updated_at: DateTime!
  username: String!
}

type kycs {
  created_at: DateTime!
  id: ID!
  institution: Institution
  kyc_document: String!
  kyc_type: String!
  updated_at: DateTime!
  volunteer: volunteers
}

enum type {
  college
  school
  university
}

type volunteers {
  created_at: DateTime!
  event_date: DateTime!
  full_name: String!
  id: ID!
  starting_date: DateTime!
  updated_at: DateTime!
  user: User!
}