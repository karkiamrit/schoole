# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Address {
  address_type: String
  country: String
  display_name: String!
  id: Int!
  latitude: String
  longitude: String
  municipality: String
  postal_code: String
  state: String
  user: User
}

type Certificate {
  certificate_title: String!
  id: Int!
  photo: String!
  student: Student!
}

input CreateAddressInput {
  address_type: String!
  country: String
  display_name: String!
  latitude: String!
  longitude: String!
  municipality: String
  postal_code: String
  state: String
}

input CreateCertificateInput {
  certificate_title: String!
  photo: String
}

input CreateEventInput {
  address: CreateAddressInput
  description: String
  end_date: DateTime!
  entry_fee: Float
  name: String!
  start_date: DateTime!
}

input CreateEventWithSubEventsInput {
  address: CreateAddressInput
  description: String
  end_date: DateTime!
  entry_fee: Float
  name: String!
  start_date: DateTime!
  sub_events: [CreateSubEventInput!]
}

input CreateInstitutionInput {
  name: String!
  type: type!
}

input CreateKycInput {
  institution: Float!
  kyc_document: String!
  kyc_type: String!
  volunteer: Float!
}

input CreateMenuInput {
  can_edit: Boolean
  href: String!
  icon: String
  is_hidden: Boolean
  is_static_route: Boolean
  menu_for: MenuFor!
  menu_name: String!
  parent_menu: String
}

input CreateOrganizerInput {
  full_name: String!
}

input CreateStudentInput {
  bio: String
  date_of_birth: DateTime!
  first_name: String!
  gender: Gender!
  interests: [String!]
  last_name: String!
  level: Level!
  middle_name: String
}

input CreateSubEventInput {
  address: CreateAddressInput
  category: String!
  description: String!
  end_date: DateTime!
  name: String!
  registration_fee: Float
  rules: String
  start_date: DateTime!
  type: SubEventType!
}

input CreateUserInput {
  email: String
  password: String!
  phone: String!
  profile_picture: String!
  user_type: String!
  username: String
}

input CreateVolunteerInput {
  full_name: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Event {
  SubEvents: [SubEvent!]!
  address: Address
  banner: String
  created_at: DateTime!
  description: String
  end_date: String!
  entry_fee: Float
  id: Int!
  institution: Institution!
  name: String!
  start_date: String!
  updated_at: DateTime!
  user: User!
}

input ForgotPasswordInput {
  input: String!
  method: String!
}

"""The gender of the students or users"""
enum Gender {
  female
  male
  not_specified
  other
}

type GetAddressType {
  count: Float
  data: [Address!]
}

type GetCertificateType {
  count: Float
  data: [Certificate!]
}

type GetEventType {
  count: Float
  data: [Event!]
}

type GetInstitutionType {
  count: Float
  data: [Institution!]
}

type GetKycType {
  count: Float
  data: [Kyc!]
}

input GetManyInput {
  """count or data or all, default = data"""
  dataType: String

  """
  {key: "ASC" or "DESC" or "asc" or "desc" or 1 or -1} or {key: {direction: "ASC" or "DESC" or "asc" or "desc", nulls: "first" or "last" or "FIRST" or "LAST"}}}
  """
  order: JSON
  pagination: IPagination
  where: JSON
}

type GetMenuType {
  count: Float
  data: [Menu!]
}

input GetOneInput {
  where: JSON!
}

type GetOrganizerType {
  count: Float
  data: [Organizer!]
}

type GetStudentType {
  count: Float
  data: [Student!]
}

type GetSubEventType {
  count: Float
  data: [SubEvent!]
}

type GetUserType {
  count: Float
  data: [User!]
}

type GetVolunteerType {
  count: Float
  data: [volunteers!]
}

input IPagination {
  """Started from 0"""
  page: Int!

  """Size of page"""
  size: Int!
}

type Institution {
  created_at: DateTime!
  id: Int!
  name: String!
  type: type!
  updated_at: DateTime!
  user: User!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type JwtWithUser {
  accessToken: String!
  refreshToken: String!
  user: User!
}

type Kyc {
  created_at: DateTime!
  id: Int!
  institution: Institution
  kyc_document: String!
  kyc_type: String!
  updated_at: DateTime!
  volunteer: volunteers
}

"""The level of education of students"""
enum Level {
  high_school
  higher_secondary
  pre_primary
  primary
  secondary
  under_graduate
}

type Mail {
  created_at: DateTime!
  html_content: String!
  id: Int!
  name: String!
  subject: String!
  text_content: String!
  updated_at: DateTime!
}

type Menu {
  can_edit: Boolean
  href: String!
  icon: String
  id: Int!
  is_hidden: Boolean
  is_static_route: Boolean
  menu_for: MenuFor!
  menu_name: String!
  parent_menu: String
}

"""Determine for whom the menu is primarily for. """
enum MenuFor {
  all
  institution
  student
}

type Mutation {
  SignUp(input: SignUpInput!): User!
  SignUpWithEmail(input: SignUpWithEmailInput!): User!
  allocateStudentToSubEvent(subEventId: Float!, userId: Float!): JSON!
  createAddress(input: CreateAddressInput!): Address!
  createCertificate(input: CreateCertificateInput!, transactionId: String!): Certificate!
  createEvent(input: CreateEventInput!): Event!
  createEventByInstitution(input: CreateEventInput!): Event!
  createEventWithSubEvents(input: CreateEventWithSubEventsInput!): Event!
  createInstitution(input: CreateInstitutionInput!): Institution!
  createKyc(input: CreateKycInput!): Kyc!
  createManyAddress(input: [CreateAddressInput!]!): [Address!]!
  createManyCertificate(input: [CreateCertificateInput!]!): [Certificate!]!
  createManyEvent(input: [CreateEventInput!]!): [Event!]!
  createManyInstitution(input: [CreateInstitutionInput!]!): [Institution!]!
  createManyKyc(input: [CreateKycInput!]!): [Kyc!]!
  createManyMenu(input: [CreateMenuInput!]!): [Menu!]!
  createManyOrganizer(input: [CreateOrganizerInput!]!): [Organizer!]!
  createManyStudent(input: [CreateStudentInput!]!): [Student!]!
  createManySubEvent(input: [CreateSubEventInput!]!): [SubEvent!]!
  createManyUsers(input: [CreateUserInput!]!): [User!]!
  createManyVolunteer(input: [CreateVolunteerInput!]!): [volunteers!]!
  createMenu(input: CreateMenuInput!): Menu!
  createOrganizer(input: CreateOrganizerInput!): Organizer!
  createStudent(input: CreateStudentInput!): Student!
  createSubEvent(eventID: Float!, input: CreateSubEventInput!): SubEvent!
  createUser(input: CreateUserInput!): User!
  createVolunteer(input: CreateVolunteerInput!): volunteers!
  deleteAddress(id: Float!): Address!
  deleteCertificate(id: Float!): Certificate!
  deleteEvent(id: Float!): Event!
  deleteInstitution(id: Float!): Institution!
  deleteKyc(id: Float!): Kyc!
  deleteMenu(id: Float!): Menu!
  deleteOrganizer(id: Float!): Organizer!
  deleteStudent(id: Float!): Student!
  deleteSubEvent(id: Float!): SubEvent!
  deleteUser(id: Float!): JSON!
  deleteVolunteer(id: Float!): volunteers!
  forgotPassword(data: ForgotPasswordInput!): Boolean!
  logout: Boolean!
  participateInSubEvent(SubEventID: Float!): JSON!
  participateMany(studentIds: [Int!]!, subEventId: Int!): JSON!
  refreshToken(refreshToken: String!): String!
  requestOtpVerifyEmail(email: String!, otpType: String!): Boolean!
  requestOtpVerifyPhone(otpType: String!, phone: String!): Boolean!
  resetPassword(newPassword: String!, token: String!): Boolean!
  signIn(input: SignInInput!): JwtWithUser!
  signInWithEmail(input: SignInWithEmailInput!): JwtWithUser!
  updateAddress(id: Float!, input: UpdateAddressInput!): Address!
  updateCertificate(id: Float!, input: UpdateCertificateInput!): Certificate!
  updateEvent(id: Float!, input: UpdateEventInput!): Event!
  updateInstitution(id: Float!, input: UpdateInstitutionInput!): Institution!
  updateKyc(id: Float!, input: UpdateKycInput!): Kyc!
  updateMe(input: UpdateUserInput!): User!
  updateMenu(id: Float!, input: UpdateMenuInput!): Menu!
  updateOrganizer(id: Float!, input: UpdateOrganizerInput!): Organizer!
  updateStudent(id: Float!, input: UpdateStudentInput!): Student!
  updateSubEvent(id: Float!, input: UpdateSubEventInput!): SubEvent!
  updateUser(id: Float!, input: UpdateUserInput!): User!
  updateVolunteer(id: Float!, input: UpdateVolunteerInput!): volunteers!
  verifyEmail(email: String!, otpCode: String!): OnlyJwt!
  verifyForgotPasswordOtp(otpCode: String!, phone: String!): String!
  verifyPhone(otpCode: String!, phone: String!): OnlyJwt!
}

type OnlyJwt {
  accessToken: String!
  refreshToken: String!
}

type Organizer {
  created_at: DateTime!
  full_name: String!
  id: Int!
  organizer_type: OrganizerType!
  updated_at: DateTime!
  user: User!
}

"""The basic organizer type of organizer user"""
enum OrganizerType {
  club
}

type Query {
  getManyAddresss(input: GetManyInput): GetAddressType!
  getManyCertificates(input: GetManyInput): GetCertificateType!
  getManyEvents(input: GetManyInput): GetEventType!
  getManyInstitutions(input: GetManyInput): GetInstitutionType!
  getManyKycs(input: GetManyInput): GetKycType!
  getManyMenus(input: GetManyInput): GetMenuType!
  getManyOrganizers(input: GetManyInput): GetOrganizerType!
  getManyStudents(input: GetManyInput): GetStudentType!
  getManySubEvents(input: GetManyInput): GetSubEventType!
  getManyUsers(input: GetManyInput): GetUserType!
  getManyVolunteers(input: GetManyInput): GetVolunteerType!
  getMe: User!
  getMyParticipation: [SubEvent!]!
  getOneAddress(input: GetOneInput!): Address!
  getOneCertificate(input: GetOneInput!): Certificate!
  getOneEvent(input: GetOneInput!): Event!
  getOneInstitution(input: GetOneInput!): Institution!
  getOneKyc(input: GetOneInput!): Kyc!
  getOneMenu(input: GetOneInput!): Menu!
  getOneOrganizer(input: GetOneInput!): Organizer!
  getOneStudent(input: GetOneInput!): Student!
  getOneSubEvent(input: GetOneInput!): SubEvent!
  getOneUser(input: GetOneInput!): User!
  getOneVolunteer(input: GetOneInput!): volunteers!
}

"""The basic roles of users"""
enum Role {
  Admin
  user
}

input SignInInput {
  password: String!
  phone: String!
}

input SignInWithEmailInput {
  email: String!
  password: String!
}

input SignUpInput {
  password: String!
  phone: String!
}

input SignUpWithEmailInput {
  email: String!
  password: String!
}

type Student {
  bio: String
  created_at: DateTime!
  date_of_birth: String
  first_name: String!
  gender: Gender!
  id: Int!
  interests: [String!]
  last_name: String!
  level: Level!
  middle_name: String
  participatedSubEvents: [SubEvent!]
  updated_at: DateTime!
  user: User!
}

type SubEvent {
  address: Address
  banner: String
  category: String!
  createdAt: DateTime!
  created_by: User
  description: String!
  end_date: DateTime!
  event: Event!
  id: Int!
  name: String!
  participants: [Student!]
  registration_fee: Float
  rules: String
  start_date: DateTime!
  type: SubEventType!
  updatedAt: DateTime!
}

"""The type of the subevent"""
enum SubEventType {
  competition
  exhibition
  other
}

input UpdateAddressInput {
  address_type: String
  country: String
  display_name: String
  latitude: String
  longitude: String
  municipality: String
  postal_code: String
  state: String
}

input UpdateCertificateInput {
  certificate_title: String
  photo: String
}

input UpdateEventInput {
  address: CreateAddressInput
  banner: String
  description: String
  end_date: DateTime!
  entry_fee: Float
  name: String!
  start_date: DateTime!
}

input UpdateInstitutionInput {
  name: String
  type: type
}

input UpdateKycInput {
  established_on: String!
}

input UpdateMenuInput {
  can_edit: Boolean
  href: String
  icon: String
  is_hidden: Boolean
  is_static_route: Boolean
  menu_for: MenuFor!
  menu_name: String
  parent_menu: String
}

input UpdateOrganizerInput {
  full_name: String!
}

input UpdateStudentInput {
  bio: String
  date_of_birth: DateTime
  first_name: String
  gender: Gender
  interests: [String!]
  last_name: String
  level: Level
  middle_name: String
}

input UpdateSubEventInput {
  address: CreateAddressInput
  banner: String
  category: String
  description: String
  end_date: DateTime
  name: String
  registration_fee: Float
  rules: String
  start_date: DateTime
  type: SubEventType!
}

input UpdateUserInput {
  email: String
  password: String
  phone: String
  profile_picture: String
  refresh_token: String
  username: String
}

input UpdateVolunteerInput {
  full_name: String!
}

type User {
  created_at: DateTime!
  email: String
  email_verified: Boolean!
  id: Int!
  institution: Institution
  last_login: DateTime
  password: String!
  phone: String
  phone_verified: Boolean!
  profile_picture: String
  refresh_token: String!
  role: Role!
  student: Student
  subEvents: [SubEvent!]!
  updated_at: DateTime!
  user_type: UserType!
  username: String!
}

"""Types of user currently we have """
enum UserType {
  institution
  student
}

enum type {
  college
  school
  university
}

type volunteers {
  created_at: DateTime!
  event_date: DateTime!
  full_name: String!
  id: Int!
  starting_date: DateTime!
  updated_at: DateTime!
  user: User!
}